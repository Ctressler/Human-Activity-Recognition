training <- read.csv(file = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", header = TRUE)
head(training)
plot(pressure)
```{r Load Dataset}
```{r Load Dataset}
```{r Load Dataset}
head(training)
str(training)
names(training)
names(training)
library(caret)
findCorrelation(training,cutoff=0.9, verbose = FALSE, names=TRUE)
training_rmna <- training[, apply(training, 2, function(x) !any(is.na(x)))]
names(training_rmna)
findCorrelation(training_rmna, cutoff=0.85, verbose = TRUE, names=TRUE)
training_rmna <- subset(training_rmna, select=-c(training_rmna$classe))
names(training_rmna)
training_rmna <- training[,apply(training, 2, function(x) !any(is.na(x)))]
names(training_rmna)
nums <- training_rmna[, sapply(training_rmna, is.numeric)]
names(num)
names(nums)
cor(nums)
library(caret)
install.packages("corrplot")
library(corrplot
)
corrplot(cor(nums))
corrplot(cor(nums), method="number")
corrplot(cor(nums), method="number", type = "upper", number.cex=0.7)
corrplot(cor(nums), method="circle", type = "upper", number.cex=0.7)
corrplot(cor(nums), method="circle", type = "upper", tl.cex=0.7)
corrplot(cor(nums), method="square", type = "upper", tl.cex=0.7)
training_data <- subset(,training_rmna, where(cor(nums <0.8)) )
training_data <- subset(training_rmna, , where(cor(nums <0.8)))
training_data <- subset(training_rmna, , which(cor(nums <0.8)))
cor(nums<0.8)
cor(nums)
names(nums)
training_data <= nums[, select=c(1:4)]
training_data = nums[, select=c(1:4)]
training_data = nums[, -c(1:4)]
names(training_data)
corrplot(cor(training_data), method="square", type = "upper", tl.cex=0.7)
cor_col <- which(cor(training)>0.8)
cor(training_data)
cor_data <- cor(training_data)
diag(cor_data)<- 0
cor_data[upper.tri(cor_data)] <- 0
cor_data
df <- cor(training_data)
hc <- findCorrelation(df, cutoff=0.8)
hc
df
hc <- findCorrelation(df, cutoff=0.8, names=TRUE)
hc
hc <- findCorrelation(df, cutoff=0.9, names=TRUE)
hc
training_data_final <- df[,-c(hc)]
training_data_final <- df[,-c("hc")]
training_data_final <- df[-c(hc)]
training_data_final <- df[-c("hc")]
training_data_final <- training_data[-c("hc")]
training_data_final <- training_data[-c(hc)]
training_data_final <- training_data[,-c(hc)]
training_data_final <- training_data[,-c("hc")]
training_data_final = training_data[,-c(hc)]
hc = sort(hc)
training_data_final = training_data[,-c(hc)]
hc
hc <- findCorrelation(df, cutoff=0.9)
training_data_final = training_data[,-c(hc)]
training_data_final = cbind(training$classe)
names(training_data_final)
training_data_new = training_data[,-c(hc)]
names(training_data_new)
td <- cbind(training_data_new,training$classe)
names(td)
td <- cbind(training_data_new,classe)
colnames(td)[colnames(td)=="training$classe"] <- "classe"
names(td)
head(td)
hc <- findCorrelation(df, cutoff=0.9)
training_data_new = training_data[,-c(hc)]
training_data_new = cbind(training_data_new,training[,c("classe")])
head(training_data_new)
head(training)
names(training)
hc <- findCorrelation(df, cutoff=0.9)
training_data_new = training_data[,-c(hc)]
training_data_new = cbind(training_data_new,training[,160])
names(training_data_new)
# Get colummns with high correlation (0ver 0.9) that are to be removed.
hc <- findCorrelation(df, cutoff=0.9)
# Remove these columns from the final dataset.
training_data_new = training_data[,-c(hc)]
# Add classe column to this database
training_data_new = cbind(training_data_new,training$classe)
colnames(training_data_new)[,46] <- "classe"
names(training_data_new)
colnames(training_data_new)[,training$classe] <- "classe"
colnames(training_data_new)[,"training$classe"] <- "classe"
colnames(training_data_new)[,c("training$classe")] <- "classe"
# Get colummns with high correlation (0ver 0.9) that are to be removed.
hc <- findCorrelation(df, cutoff=0.9)
# Remove these columns from the final dataset.
training_data_new = training_data[,-c(hc)]
# Add classe column to this database
training_data_new = cbind(training_data_new,classe =training$classe)
names(training_data_new)
str(training_data_new)
control <- trainControl(method="repeatedcv", number=10, repeats = 3)
rf_model <- train(classe ~., data = training_data_new, method = "rf", trControl = control)
library(randomForest)
install.packages("randomForest")
library(randomForest)
control <- trainControl(method="repeatedcv", number=10, repeats = 3)
rf_model <- train(classe ~., data = training_data_new, method = "rf", trControl = control)
library(randomForest)
control <- trainControl(method="repeatedcv", number=10, repeats = 3)
library(caret)
library(randomForest)
control <- trainControl(method="repeatedcv", number=10, repeats = 3)
rf_model <- train(classe ~., data = training_data_new, method = "rf", trControl = control)
install.packages("e1071")
library(e1071)
rf_model <- train(classe ~., data = training_data_new, method = "rf", trControl = control)
rf_model
rf_model_predict <- predict(rf_model_predict, training_data_new)
rf_model_predict <- predict(rf_model, training_data_new)
confusionMatrix(rf_model_predict, training_data_new$classe)
Testing <- read.csv(file = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv)", header=TRUE)
Testing <- read.csv(file = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", header=TRUE)
rf_model_predict_test <- predict(rf_model, Testing)
confusionMatrix(rf_model_predict_test, Testing$classe)
names(Testing)
train_data <- createDataPartition(training$classe, p=0.7, list = FALSE)
train_data <- createDataPartition(training$classe, p=0.7, list = FALSE)
inTrain <- training[train_data]
InTest <- training[-train_data]
dim[inTrain]
dim(inTrain)
head(inTrain)
train_data <- createDataPartition(training$classe, p=0.7, list = FALSE)
inTrain <- training[train_data,]
InTest <- training[-train_data,]
dim(InTrain)
dim(inTrain)
dim(InTest)
training_rmna <- inTrain[,apply(inTrain, 2, function(x) !any(is.na(x)))]
nums <- training_rmna[, sapply(training_rmna, is.numeric)]
training_data = nums[, -c(1:4)]
corrplot(cor(training_data), method="square", type = "upper", tl.cex=0.7)
install.packages("corrplot")
library(corrplot)
nums <- training_rmna[, sapply(training_rmna, is.numeric)]
training_data = nums[, -c(1:4)]
corrplot(cor(training_data), method="square", type = "upper", tl.cex=0.7)
df <- cor(training_data)
# Get colummns with high correlation (0ver 0.9) that are to be removed.
hc <- findCorrelation(df, cutoff=0.9)
# Remove these columns from the final dataset.
training_data_new = training_data[,-c(hc)]
# Add classe column to this dataset
training_data_new = cbind(training_data_new,classe=training$classe)
training_data_new = cbind(training_data_new,classe=inTrain$classe)
install.packages("randomForest")
install.packages("e1071")
library(randomForest)
library(e1071)
control <- trainControl(method="repeatedcv", number=10, repeats = 3)
rf_model <- train(classe ~., data = training_data_new, method = "rf", trControl = control)
install.packages("randomForest")
install.packages("e1071")
library(randomForest)
library(e1071)
control <- trainControl(method="repeatedcv", number=10, repeats = 3)
install.packages("caret")
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
library(caret)
install.packages("caret")
library(caret)
install.packages("randomForest")
install.packages("e1071")
library(randomForest)
library(e1071)
control <- trainControl(method="repeatedcv", number=10, repeats = 3)
inTest <- training[-train_data,]
install.packages("caret")
library(caret)
training <- read.csv(file = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", header = TRUE)
install.packages("caret")
install.packages("caret")
install.packages("caret")
training <- read.csv(file = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", header = TRUE)
train_data <- createDataPartition(training$classe, p=0.7, list = FALSE)
library(caret)
library(caret)
install.packages("caret")
library(caret)
install.packages("caret")
library(caret)
